@page "/tables"

@inject IJSRuntime JSRuntime

@using MauiApp1.Models
@using MySql.Data.MySqlClient
@using System.Collections.Generic
@using System.Threading.Tasks
@using System

<h3>Main Floor Tables</h3>

@if (isLoading)
{
    <p><em>Loading tables...</em></p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red;">@errorMessage</p>
}
else if (tables.Any())
{
    <div class="table-layout">
        @foreach (var table in tables)
        {
            <div class="@GetTableCssClass(table)" @onclick="@(() => HandleTableClick(table))">
                Table @table.TableId
                <br />
                (@table.Seats Seats)
            </div>
        }
    </div>
}
else
{
    <p>No tables found.</p>
}


@code {
    private List<TableModel> tables = new List<TableModel>();
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private int? selectedTableId = null;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        errorMessage = string.Empty;
        try
        {
            tables = await GetMainFloorTablesDirectlyAsync();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error initializing page: {ex.Message}");
            errorMessage = "Failed to load table data. Please check connection or database.";
            tables = new List<TableModel>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task<List<TableModel>> GetMainFloorTablesDirectlyAsync()
    {
        // ... (your existing database fetching logic remains unchanged) ...
        var tables = new List<TableModel>();
        string sql = "SELECT table_id, seats, is_reserved FROM `Table` WHERE table_id BETWEEN 1 AND 11 ORDER BY table_id;";
        string server = "localhost";
        string port = "3306";
        string database = "test2db";
        string user = "root";
        string password = "password";
        string connectionString = $"Server={server};Port={port};Database={database};Uid={user};Pwd={password};";

        System.Diagnostics.Debug.WriteLine($"Using HARDCODED connection string: Server={server};Port={port};Database={database};Uid={user};Pwd=*****");

        try
        {
            System.Diagnostics.Debug.WriteLine("Attempting to open MySQL connection...");
            await using var connection = new MySqlConnection(connectionString);
            await connection.OpenAsync();
            System.Diagnostics.Debug.WriteLine("MySQL connection opened successfully.");

            await using var command = new MySqlCommand(sql, connection);
            await using var reader = await command.ExecuteReaderAsync();
            System.Diagnostics.Debug.WriteLine("SQL command executed. Reading data...");

            int rowCount = 0;
            while (await reader.ReadAsync())
            {
                rowCount++;
                tables.Add(new TableModel
                    {
                        TableId = Convert.ToInt32(reader["table_id"]),
                        Seats = Convert.ToInt32(reader["seats"]),
                        IsReserved = Convert.ToBoolean(reader["is_reserved"])
                    });
            }
            System.Diagnostics.Debug.WriteLine($"Finished reading. Found {rowCount} rows.");
        }
        catch (MySqlException ex)
        {
            System.Diagnostics.Debug.WriteLine($"MySQL Error: {ex.Message}");
            errorMessage = $"Database connection failed: {ex.Message}";
            throw new InvalidOperationException($"MySQL error: {ex.Message}", ex);
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"General Error: {ex.Message}");
            errorMessage = $"General error: {ex.Message}";
            throw new InvalidOperationException($"Error fetching table data: {ex.Message}", ex);
        }
        return tables;
        // --- End of direct database logic ---
    }

    private string GetTableCssClass(TableModel table)
    {
        if (table.IsReserved)
        {
            return "table-box table-reserved";
        }
        else if (selectedTableId.HasValue && table.TableId == selectedTableId.Value)
        {
            return "table-box table-available table-selected";
        }
        else
        {
            return "table-box table-available";
        }
    }

    // --- UPDATED: Click handler to add confirmation ---
    private async Task HandleTableClick(TableModel selectedTable)
    {
        if (selectedTable.IsReserved)
        {
            // Still show alert for reserved tables and stop
            await JSRuntime.InvokeVoidAsync("alert", $"Table {selectedTable.TableId} is currently reserved.");
            return;
        }

        // --- Confirmation Step ---
        // Ask user for confirmation before selecting
        string confirmationMessage = $"Confirm selection of Table {selectedTable.TableId}?";
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", confirmationMessage); // Use InvokeAsync<bool>

        if (confirmed)
        {
            // --- Action on Confirmation ---
            // User clicked OK - proceed to select the table
            selectedTableId = selectedTable.TableId; // Set selection state
            System.Diagnostics.Debug.WriteLine($"Table {selectedTable.TableId} selection CONFIRMED.");

            // Future: Navigation logic would go here after confirmation
            // NavigationManager.NavigateTo($"/order/{selectedTable.TableId}");
        }
        else
        {
            // --- Action on Cancellation ---
            // User clicked Cancel - do nothing to the current selection state
            System.Diagnostics.Debug.WriteLine($"Table {selectedTable.TableId} selection cancelled by user.");
            // selectedTableId remains unchanged
        }

        // StateHasChanged() is implicitly called by Blazor for UI events like @onclick
    }
}